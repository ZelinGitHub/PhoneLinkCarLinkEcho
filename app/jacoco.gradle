apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.8.2"
}
//源代码路径，你有多少个module，你就在这写多少个路径
def coverageSourceDirs = [
        "$rootDir" + '/app/src/main/java'
        , "$rootDir" + '/CAServiceManager/src/main/java'
        , "$rootDir" + '/HiCarClient/src/main/java'
        , "$rootDir" + '/HiCarPresenterComponent/src/main/java'
        , "$rootDir" + '/HiCarServiceComponent/src/main/java'
        , "$rootDir" + '/ScheduleCard/src/main/java'
]
//class文件路径，就是我上面提到的class路径，看你的工程class生成路径是什么，替换我的就行
def coverageClassDirs = [
        "$rootDir" + '/app/build/intermediates/javac/debug/classes'
        , "$rootDir" + '/CAServiceManager/build/intermediates/javac/debug/classes'
        , "$rootDir" + '/HiCarClient/build/intermediates/javac/debug/classes'
        , "$rootDir" + '/HiCarPresenterComponent/build/intermediates/javac/debug/classes'
        , "$rootDir" + '/HiCarServiceComponent/build/intermediates/javac/debug/classes'
        , "$rootDir" + '/ScheduleCard/build/intermediates/javac/debug/classes'
]
//这个就是具体解析ec文件的任务，会根据我们指定的class路径、源码路径、ec路径进行解析输出
task jacocoTestReport(type: JacocoReport) {

    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {

        xml.enabled = true
        html.enabled = true
    }

    classDirectories.setFrom(files(files(coverageClassDirs).files.collect {

        fileTree(dir: it,
// 过滤不需要统计的class文件
                excludes: ['**/R*.class',
                ])
    }))
    sourceDirectories.setFrom(files(coverageSourceDirs))
    executionData.setFrom(files("$buildDir/outputs/code_coverage/debugAndroidTest/connected/coverage.ec"))
    doFirst {

//遍历class路径下的所有文件，替换字符
        coverageClassDirs.each {
            path ->
                new File(path).eachFileRecurse {
                    file ->
                        if (file.name.contains('$$')) {

                            file.renameTo(file.path.replace('$$', '$'))
                        }
                }
        }
    }
}