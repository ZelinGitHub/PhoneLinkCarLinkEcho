apply plugin: 'com.android.application'
apply plugin: 'jacoco'


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.wt.phonelink"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode as int
        versionName rootProject.ext.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [
//                versionCode: "${rootProject.ext.versionCode}",
//                versionName: rootProject.ext.versionName
versionCode: 3,
versionName: "C236_V1_0_3"
        ]

        // emulation feature is disabled by default
        buildConfigField "boolean", "ENABLE_DISPLAY_SIZE_EMULATION", "false"
        //定义flavor的维度，每个flavor都可以配置自己的维度（Dimension）
        flavorDimensions "default"
    }

    signingConfigs {
        release {
//            keyAlias 'c318platform'
//            keyPassword '123456'
//            storeFile file('src/signs/C318/318platform.jks')
//            storePassword '123456'
            keyAlias "syssign"
            keyPassword "autopai"
            storePassword 'autopai'
            storeFile file('src/signs/C857/syssign-c857-new.jks')
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    buildTypes {
        release {
            zipAlignEnabled false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            zipAlignEnabled false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //todo jinkens编译删掉
            signingConfig signingConfigs.release
            // 单元测试测试代码覆盖率使用
            testCoverageEnabled true
        }
    }

    productFlavors {// 配置了不同的res资源
        default_main {

        }
        c318 {

        }
        c857 {

        }
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
        }
        default_main {
            java.srcDirs = ['src/default_main/java']
            res.srcDirs = ['src/default_main/res']
        }
        c318 {
            java.srcDirs = ['src/c318/java']
            res.srcDirs = ['src/c318/res']
        }
        c857 {
            java.srcDirs = ['src/c857/java']
            res.srcDirs = ['src/c857/res']
        }
    }
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "PhoneLink.apk"
        }
    }

    packagingOptions {
        pickFirst 'META-INF/INDEX.LIST'
        pickFirst 'META-INF/LICENSE'
        pickFirst 'META-INF/io.netty.versions.properties'
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    def coverageSourceDirs = [
            './src/main/java'
    ]

    task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
        group = "Reporting"
        description = "Generate Jacoco coverage reports after running tests."

        reports {
            xml.enabled = true
            html.enabled = true
        }

        classDirectories.from = fileTree(
                //检测覆盖率的class所在目录(以项目class所在目录为准)
                //                dir: './build/intermediates/classes/debug',       //gradle2.3 class所在目录
                dir: './build/intermediates/javac/debug',               //增加以上目录中不需要检测的文件列表
                excludes: ['**/R$*.class',
                           '**/R.class',
                           '**/BuildConfig.*',
                           '**/Manifest*.*',
                           'app/src/main/java/com/wt/phonelink/hicar/broadcast/**'

                ]
        )

        sourceDirectories.from = files(coverageSourceDirs) //设置需要检测覆盖率的目录
        executionData.from = files("$buildDir/jacoco/testDebugUnitTest.exec") //存储APP运行时产生报告的路径
    }
    packagingOptions {
        pickFirst 'lib/arm64-v8a/libcrypto.so'
    }

    repositories {
        flatDir {
            dirs 'libs', '../HiCarServiceComponent/libs'
        }
    }
}

dependencies {
    implementation 'com.google.code.findbugs:findbugs-annotations:3.0.1'
    implementation 'io.grpc:grpc-protobuf-lite:1.36.0'
    implementation 'com.google.crypto.tink:tink-android:1.6.0'
    implementation 'androidx.room:room-runtime:2.3.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'androidx.test:monitor:1.3.0'
    implementation 'androidx.test.ext:junit:1.1.3'

    testImplementation 'junit:junit:4.12'
// Core library
    androidTestImplementation 'androidx.test:core:1.1.0'
// AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'
// Espresso dependencies
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.1.1'

    implementation 'com.openos.sdk:statistic:1.0.0.+'
    //依赖HiCarPresenterComponent
    //api方法会导致依赖传递，而implementation方法不会。
    //api等于compile。
    //HiCarPresenterComponent传递依赖HiCarServiceComponent
    //HiCarServiceComponent传递依赖CAServiceManager
    //HiCarPresenterComponent模块里面是使用华为hicar的一些presenter（MVP模式）
    //HiCarServiceComponent包含核心类HiCarServiceManager和一切其他的管理器、工具类、serviceImpl和BBinder对象HiCarManagerImpl
    //CAServiceManager模块包含使用华为hicar的一些类使用的事件总线组件
    api project(path: ':HiCarPresenterComponent')
    //compileOnly等同于provided。
    //只在编译时有效，不会参与打包。
    //可以在自己的moudle中使用该方式依赖一些比如com.android.support，gson这些使用者常用的库，避免冲突。。
    implementation files('libs/framework_c318.jar')
    //单元测试
    testImplementation 'org.robolectric:robolectric:4.2.1'
    testImplementation "org.mockito:mockito-core:2.11.0"
    //梧桐语音sdk
    implementation 'com.tinnove.wecarspeech:clientsdk:1.2.4.0'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.12'

//    implementation 'io.alterac.blurkit:blurkit:1.0.0' // Kotlin支持
    implementation "androidx.lifecycle:lifecycle-extensions:2.0.0"  // jetpack lifecycle
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1" // 协程支持
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.1" // 协程支持
    implementation "com.blankj:utilcodex:1.30.5" // Util 与Json 支持
    c318Implementation "com.autopai.support:widget:C318-1.0.0.bs"
    c857Implementation "com.autopai.support:widget:C857-1.0.0.ad"
    //独立主题换肤
    implementation 'com.openos.sdk:openos_platform:1.0.0.+'
    //北斗android.car 监听电源状态
    api files('libs/android.car4.4.jar')
}
